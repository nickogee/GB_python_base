'''
1. Создать программный файл в текстовом формате, записать в него построчно данные, вводимые пользователем.
Об окончании ввода данных будет свидетельствовать пустая строка.
'''
#
#
def write_str(str, f_obj):
    '''
    функция записывает строку str в переданный объект открытого файла
    :param str: -> (str)
    :param f_obj: -> (_io.TextIOWrapper)
    :return: None
    '''
    f_obj.write(str + '\n')     # будем добавлять перенос строки после каждого ввода

def ask_usr():
    '''
    функция опрашивает пользователя, ожидая ввод строки для записи в файл
    :return: (str) строка, введенная пользователем
    '''
    return input('Введите строку для записи в файл. Для окончания ввода - пусттая строка\n')


with open('my_files/task_1.txt', 'w') as f_obj:
    str_to_write = ask_usr()
    while str_to_write:
        write_str(str=str_to_write, f_obj=f_obj)
        str_to_write = ask_usr()
    else:
        print('Запись в файл окончена')

'''
2. Создать текстовый файл (не программно), сохранить в нём несколько строк, 
выполнить подсчёт строк и слов в каждой строке.
'''

with open('my_files/task_2.txt', 'r') as f_obj:
    # прочитаем все строки в файле
    lns = f_obj.readlines()

# Уберем символы переноса строки
lns = [ln.replace('\n', '') for ln in lns]

# количество строк в файле
lns_count = len(lns)

# получим список кортежей, в которых первое значение - номер строки, второе - сама строка из файла
lns_zip = list(zip(range(1, lns_count + 1), lns))

# создадим словарь распаковав кортежи, в котором ключами будут номера строк, а значениями - количества слов в строке
words_dict = {i: len(j.split(' ')) for i, j in lns_zip}

# выведем полученные данные
for key, value in words_dict.items():
    print(f'В строке {key} количество слов - {value}')

print(f'Количество строк в файле - {lns_count}')

'''
3. Создать текстовый файл (не программно). 
Построчно записать фамилии сотрудников и величину их окладов (не менее 10 строк). 
Определить, кто из сотрудников имеет оклад менее 20 тысяч, вывести фамилии этих сотрудников. 
Выполнить подсчёт средней величины дохода сотрудников.
'''

with open('my_files/task_3.txt', 'r') as f_obj:
    # прочитаем все строки в файле
    lns = f_obj.readlines()

# С начала очистим и оформим данные в удобный вид - словарь

# Уберем символы переноса строки
lns = [ln.replace('\n', '') for ln in lns]

# Разделим строки на списки [Фамилия, Оклад]
lns = [ln.split(' ') for ln in lns]

# создадим словарь, в котором ключами будут Фамилии, а значениями - Оклад
salary_dict = {i[0]: float(i[1]) for i in lns}

# Теперь проанализируем данные в словаре по задаче

# Среднюю величину зароботка можем получить сразу
total_salary = sum(salary_dict.values())
eployee_cnt = len(salary_dict)
avg_sal = round(total_salary/eployee_cnt, 2)

# найдем сотрудников, у которых оклад меньше 20 000
for name, mny in salary_dict.items():
    if mny < 20000:
        print(f'У сотрудника {name} оклад менее 20 000')

print(f'\nСредняя величина оклада сотрудников - {avg_sal}')

'''
4. Создать (не программно) текстовый файл со следующим содержимым:
One — 1
Two — 2
Three — 3
Four — 4
Напишите программу, открывающую файл на чтение и считывающую построчно данные. 
При этом английские числительные должны заменяться на русские. 
Новый блок строк должен записываться в новый текстовый файл.
'''
# Создадим словарь-соответствие чисел (ключи) и их написаний на русском (значения)
NUMS_RU = {
    1: 'Один',
    2: 'Два',
    3: 'Три',
    4: 'Четыре',
}

# создадим/пересоздадим файл, в который будем записывать отредактированные строки
f_obj_ru = open("my_files/task_4_ru.txt", 'w')

with open('my_files/task_4.txt', 'r') as f_obj:
    # прочитаем файл построчно, уберем переносы строки в конце строк и возможные пробелы в начале, конце каждой строки
    for line in f_obj:
        line = line.replace('\n', '')
        line = line.strip()

        # заменим значения числительных на русские

        # получили последний символ в строке - число
        num = int(line[-1])

        # получим индекс, с которого начинается подстрока (с пробелами) " - "
        dash_ind = line.index(' - ')

        # заменим подстроку до этого индекса на значение из словаря-соответствия
        line = line.replace(line[:dash_ind + 1], NUMS_RU[num] + ' ')

        # воспользуемся уже имеющейся функцией записи строки в объект файла из задания №1
        write_str(str=line, f_obj=f_obj_ru)

f_obj_ru.close()

'''
5. Создать (программно) текстовый файл, записать в него программно набор чисел, разделённых пробелами. 
Программа должна подсчитывать сумму чисел в файле и выводить её на экран.
'''

# запросим у пользователя набор чисел, разделенных пробелами
ipt_str = input('Введите набор чисел, разделенных пробелами\n')

# преобразуем в список
ipt_ls = ipt_str.split(' ')

# запишм в файл
with open('my_files/task_5.txt', 'w') as f_obj:
    for i in ipt_ls:
        print(i, end=' ', file=f_obj)


# теперь прочитаем из файла в строку
with open('my_files/task_5.txt', 'r') as f_obj:
    f_str = f_obj.read()

# преобразуем в список
f_ls = [int(i) for i in f_str.split(' ') if i.isdigit()]

# вывод суммы чисел
print(f'Сумма чисел в файле: {sum(f_ls)}')

'''
6. Сформировать (не программно) текстовый файл. 
В нём каждая строка должна описывать учебный предмет и наличие лекционных, 
практических и лабораторных занятий по предмету. Сюда должно входить и количество занятий. 
Необязательно, чтобы для каждого предмета были все типы занятий.
Сформировать словарь, содержащий название предмета и общее количество занятий по нему. Вывести его на экран.
'''
# Так как данные по видам занятий и часам предметов очень "разношерстно" представлены
# воспользуемся регулярными выражениями для очистки данных

import re

with open('my_files/task_6.txt', 'r') as f_obj:
    # прочитаем все строки в файле
    lns = f_obj.readlines()

# Уберем символы переноса строки
lns = [ln.replace('\n', '') for ln in lns]

# Разобьем строки по разделителю ":" на списки ['Предмет', 'Строка, содержащая часы учебы']
subjects_ls = [st.split(':') for st in lns]

# Из второго элемента регуляркой возьмем все входжения чисел, которые и будут часами, но пока в строковом типе
subjects_ls = [[i.strip(), re.findall(r'[0-9]+', j)] for i, j in subjects_ls]

# Создадим соварь распаковав списки
# Первый элемент в каждом списке уже можем использовать для установки ключа в словаре
# Во втором элементе приведем строковые типы часов в int и сразу их просуммируем - это будут значения словаря

subjects_dict = {i: sum([int(k) for k in j]) for i, j in subjects_ls}

print(subjects_dict)

'''
7. Создать вручную и заполнить несколькими строками текстовый файл, 
в котором каждая строка будет содержать данные о фирме: название, форма собственности, выручка, издержки.
Пример строки файла: firm_1 ООО 10000 5000.

Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также среднюю прибыль. 
Если фирма получила убытки, в расчёт средней прибыли её не включать.
Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями, а также словарь со средней прибылью. 
Если фирма получила убытки, также добавить её в словарь (со значением убытков).
'''

import json


with open('my_files/task_7.txt', 'r') as f_obj:
    # прочитаем все строки в файле
    lns = f_obj.readlines()

# Уберем символы переноса строки
lns = [ln.replace('\n', '') for ln in lns]

# Разобьем строки по разделителю "пробел"
line_ls = [st.split(' ') for st in lns]

# Так как у нас "пробел" может присутствовать и в названии фирмы и в качастве разделителя "колонок"
# надежнее вычленять значения "колонок" с концов строк, для этого развернем списки

line_ls = [st[::-1] for st in line_ls]

# Теперь можем считать, что:
# элемент[0] - издержки,
# элемент[1] - выручка,
# элемент[2] - форма собственности
# элементы [3:] - составляющие названия (соберем его в одну строку)

line_ls = [[float(st[0]), float(st[1]), st[2], ' '.join(st[3:])] for st in line_ls]

# развернем списки назад для удобства
line_ls = [st[::-1] for st in line_ls]

pft_summ = 0     # будет содержать общую прибыль фирм, у которых она была
pft_cnt = 0      # счетчик фирм, которые отработали с прибылью

# Добавим в концы списков по фирмам элемент[4] - прибыль, посчитаем среднюю прибыль
for st in line_ls:
    pft = st[2] - st[3]
    st.append(pft)
    if pft > 0:
        pft_summ += pft
        pft_cnt += 1

# средняя прибыль
avg_pft = round(pft_summ / pft_cnt, 2)

# создадим список  - словарь с фирмами и их прибылями, а также словарь со средней прибылью
json_ls = [{i: j for i, j in [(st[0], st[4]) for st in line_ls]}]
json_ls.append({'average_profit': avg_pft})

# Запишем полученные двнные в файл json
with open('my_files/data_file.json', "w", encoding='utf-8') as write_f:
    json.dump(json_ls, write_f, ensure_ascii=False)

print(json_ls)