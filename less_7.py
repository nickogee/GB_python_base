'''
1. Реализовать класс Matrix (матрица).
Обеспечить перегрузку конструктора класса (метод __init__()),
который должен принимать данные (список списков) для формирования матрицы.
Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц).
Результатом сложения должна быть новая матрица.
'''


class Matrix:

    def __init__(self, mx_ls):

        # свойство будет содержать данные матрицы (список списков)
        self.data = mx_ls

        # получим размерность матрицы, вычислив количество элементов в основном списке i и в первом вложенном списке j
        # предпологается, что размерностьэлементов списка корректна, все вложенные списки имеют одинаковый размер

        # свойство будет содержать размерность матрицы в виде кортежа (i, j)
        self.dim = (len(mx_ls), len(mx_ls[0]))

    def __str__(self):

        # зададим строковое представление
        st = ''
        for i in self.data:
            st += '| '      # визуальные границы строк
            for j in i:
                st += f'{j} '
            st += '|\n'     # визуальные границы строк

        return st

    def __add__(self, other):

        # убедимся, что размерности складываемых матриц одинаковы
        if self.dim[0] == other.dim[0] and self.dim[1] == other.dim[1]:

            # содзадим список списков с суммами поэлементно
            mx_ls = [[self.data[j][i] + other.data[j][i] for i in range(self.dim[1])] for j in range(self.dim[0])]

            # создадим результирующую матрицу
            add_mtx = Matrix(mx_ls)
            return add_mtx
        else:
            print('Складываемые матрицы разного размера')
            return ValueError


m_ls1 = [
    [1, 2, 3],
    [4, 5, 6]
]

m_ls2 = [
    [1, 1, 1],
    [1, 1, 1]
]

m_ls3 = [
    [1, 2],
    [3, 4],
    [5, 6],
    [7, 8],
]

mrx1 = Matrix(m_ls1)
mrx2 = Matrix(m_ls2)

print(mrx1 + mrx2)



